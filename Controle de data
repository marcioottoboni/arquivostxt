from calendar import month
from datetime import date
import os
import datetime
from datetime import datetime, timedelta
import csv
import openpyxl
#=================================================================================================================================================================
def particiona(sql_base,data_inicio,qtd_particoes,tipo_particoes):
    print(f'Parametros pasados\n  sql_base-> {sql_base}\n   data_inicio-> {data_inicio}\n   qtd_particoes-> {qtd_particoes}\n   tipo_particoes=> {tipo_particoes}')
    arquivo_leitura  = open(os.path.join(sql_base),'r')
    lista =  arquivo_leitura.readlines()
    lista_teste  = data_inicio.split("/")
    data_inicio = datetime(int(lista_teste[2]),int(lista_teste[1]),int(lista_teste[0]))
    
    data_passo = data_inicio -  timedelta(days= qtd_particoes) 
    data_particao =  data_passo + timedelta(days= 1) 
   
    while qtd_particoes > 0:
        if tipo_particoes == "D":
            data_passo = data_inicio -  timedelta(days= qtd_particoes) 
            data_particao =  data_passo + timedelta(days= 1) 
        elif tipo_particoes == "H":
            data_passo = data_inicio -  timedelta(hours= qtd_particoes) 
            data_particao =  data_passo + timedelta(days= 1) 
        elif tipo_particoes == "M":
            data_passo = data_inicio -  timedelta(minutes= qtd_particoes) 
            data_particao =  data_passo + timedelta(days= 1) 
        else:
            print(f'Tipo de particao incorreto!')
        arquivo_filtrado = open(f'{qtd_particoes}.txt','x') 
        for i, line in enumerate(lista, 1):
                if 'FROM RDR_OWNER.PROCESSED_TRAN PARTITION(PROC_TRAN_MMDDYYYY) PT' in line:
                    line = line.replace('FROM RDR_OWNER.PROCESSED_TRAN PARTITION(PROC_TRAN_MMDDYYYY) PT',f'FROM RDR_OWNER.PROCESSED_TRAN PARTITION(PROC_TRAN_{data_particao.strftime("%m")}{data_particao.strftime("%d")}{data_particao.strftime("%Y")}) PT')    
                    arquivo_filtrado.writelines(line)
                elif "AND PT.DE7_TRAN_DTTM >= to_date ('DD/MM/YYYY 00:00:00, 'DD/MM/YYYY HH24:MI:SS')" in line:                    
                    if  tipo_particoes == "D":
                        line = line.replace("AND PT.DE7_TRAN_DTTM >= to_date ('DD/MM/YYYY 00:00:00, 'DD/MM/YYYY HH24:MI:SS')",f"AND PT.DE7_TRAN_DTTM >= to_date ('{data_passo.strftime('%d')}/{data_passo.strftime('%m')}/{data_passo.strftime('%Y')} 00:00:00', 'DD/MM/YYYY HH24:MI:SS')")    
                        arquivo_filtrado.writelines(line)
                    elif tipo_particoes == "H":
                        line = line.replace("AND PT.DE7_TRAN_DTTM >= to_date ('DD/MM/YYYY 00:00:00, 'DD/MM/YYYY HH24:MI:SS')",f"AND PT.DE7_TRAN_DTTM >= to_date ('{data_passo.strftime('%d')}/{data_passo.strftime('%m')}/{data_passo.strftime('%Y')} {data_passo.strftime('%H')}:00:00', 'DD/MM/YYYY HH24:MI:SS')")    
                        arquivo_filtrado.writelines(line)
                    elif tipo_particoes == "M":
                        line = line.replace("AND PT.DE7_TRAN_DTTM >= to_date ('DD/MM/YYYY 00:00:00, 'DD/MM/YYYY HH24:MI:SS')",f"AND PT.DE7_TRAN_DTTM >= to_date ('{data_passo.strftime('%d')}/{data_passo.strftime('%m')}/{data_passo.strftime('%Y')} {data_passo.strftime('%H')}:{data_passo.strftime('%M')}:00', 'DD/MM/YYYY HH24:MI:SS')")    
                        arquivo_filtrado.writelines(line)
                    else:
                        arquivo_filtrado.writelines(line)
                elif "AND PT.DE7_TRAN_DTTM <= to_date ('DD/DD/YYYY 23:59:59', 'DD/MM/YYYY HH24:MI:SS')" in line:
                    if  tipo_particoes == "D":
                        line = line.replace("AND PT.DE7_TRAN_DTTM <= to_date ('DD/DD/YYYY 23:59:59', 'DD/MM/YYYY HH24:MI:SS')",f"AND PT.DE7_TRAN_DTTM <= to_date ('{data_passo.strftime('%d')}/{data_passo.strftime('%m')}/{data_passo.strftime('%Y')} 23:59:59', 'DD/MM/YYYY HH24:MI:SS')")    
                        arquivo_filtrado.writelines(line)
                    elif tipo_particoes == "H":
                        line = line.replace("AND PT.DE7_TRAN_DTTM <= to_date ('DD/DD/YYYY 23:59:59', 'DD/MM/YYYY HH24:MI:SS')",f"AND PT.DE7_TRAN_DTTM <= to_date ('{data_passo.strftime('%d')}/{data_passo.strftime('%m')}/{data_passo.strftime('%Y')} {data_passo.strftime('%H')}:59:59', 'DD/MM/YYYY HH24:MI:SS')")    
                        arquivo_filtrado.writelines(line)
                    elif tipo_particoes == "M":
                        line = line.replace("AND PT.DE7_TRAN_DTTM <= to_date ('DD/DD/YYYY 23:59:59', 'DD/MM/YYYY HH24:MI:SS')",f"AND PT.DE7_TRAN_DTTM <= to_date ('{data_passo.strftime('%d')}/{data_passo.strftime('%m')}/{data_passo.strftime('%Y')} {data_passo.strftime('%H')}:{data_passo.strftime('%M')}:59', 'DD/MM/YYYY HH24:MI:SS')")    
                        arquivo_filtrado.writelines(line)
                    else:   
                        arquivo_filtrado.writelines(line)
                else:
                    line = line
                    arquivo_filtrado.writelines(line)
        qtd_particoes -= 1
def unifica(pasta,script_base):
    # Criar um objeto Workbook do openpyxl
    workbook = openpyxl.Workbook()
    # Iterar sobre todos os arquivos na pasta
    for filename in os.listdir(pasta):
        if filename.endswith(".txt"):
            # Abrir o arquivo texto
            with open(os.path.join(pasta, filename), "r") as arquivo:
                # Ler o conteúdo do arquivo e dividir em linhas
                conteudo = arquivo.read()
                linhas = conteudo.split("\n")
                # Criar um objeto Worksheet do openpyxl com o nome
                worksheet = workbook.create_sheet(title=filename)
                # Adicionar os cabeçalhos à primeira linha da planilha
                cabecalhos = cria_cabecalho(script_base)
                worksheet.append(cabecalhos)
                # Adicionar as linhas restantes à planilha
                for linha in linhas:
                    valores = linha.split(";")
                    worksheet.append(valores)
    # Salvar o arquivo Excel
    workbook.save("resultado.xlsx")
def cria_cabecalho(script_base):   
    lista = []
    with open(os.path.join(script_base), "r") as arquivo:
        conteudo = arquivo.read()
        linhas = conteudo.split("\n")
        for item in linhas:
            inicio = item.find('"') + len('"')
            fim = item.find('"', inicio)
            if inicio >= 0 and fim >= 0 and  item[inicio:fim]  != ';':
                print(item[inicio:fim])
                lista += [item[inicio:fim]]
    return lista
#=================================================================================================================================================================
if __name__ == '__main__':
    acao = input(f'Digite:  \n(1) Para criar multiplas particoes utilizando um script!\n(2) Parar unificar os arquivos criados pelo toad')
    while acao == "1" or acao == "2" :
        if acao == "1":
            sql_base       = input(f'Digite o caminho do script SQL que sera utilizado como base para o particionamento')
            data_inicio    = input(f'Digite a data inicio no formato DD/MM/YYYY para que as particoes sejam criadas')
            qtd_particoes  = int(input(f'Digite a  quantidade de particoes'))
            tipo_particoes = input(f'Digite "D" P/ particionar a query de dia em dia\n       "H" P/ particionar a query de hora em hora\n       "M" P/ particionar a query de minuto em minuto ou \n       "S" para sair!')
            particiona(sql_base,data_inicio,qtd_particoes,tipo_particoes)            
        elif acao == "2":
            pasta       = input("Digite o caminho da pasta com os arquivos gerados pelo toad: ")
            script_base = input("Digite o caminho e nome  da script  SQL: ")
            unifica(pasta,script_base)           
        else:
            print(f'Programa finalizado digite:  \n(1) Para criar multiplas particoes utilizando um script!\n(2) Parar unificar os arquivos criados pelo toad')    
        acao = input(f'Programa finalizado digite:  \n(1) Para criar multiplas particoes utilizando um script!\n(2) Parar unificar os arquivos criados pelo toad')    


